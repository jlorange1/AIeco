// Define the Organism class
class Organism {
  constructor(x, y, size, speed, color, isPredator, isPrey) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.speed = speed;
    this.color = color;
    this.isPredator = isPredator;
    this.isPrey = isPrey;
    this.hunger = 0;
    this.maxHunger = 100;
  }

  // Update the organism's position and behavior
  update(organisms) {
    this.move();
    this.eat(organisms);
  }

  // Move the organism randomly
  move() {
    this.x += (Math.random() - 0.5) * this.speed;
    this.y += (Math.random() - 0.5) * this.speed;
  }

  // Try to eat other organisms
  eat(organisms) {
    for (let i = 0; i < organisms.length; i++) {
      let other = organisms[i];
      if (other != this && this.isPrey && other.isPredator && this.distanceTo(other) < this.size + other.size) {
        // This organism is prey and the other organism is a predator
        this.hunger = 0;
        organisms.splice(i, 1);
        return;
      } else if (other != this && this.isPredator && other.isPrey && this.distanceTo(other) < this.size + other.size) {
        // This organism is a predator and the other organism is prey
        other.hunger = 0;
        organisms.splice(organisms.indexOf(this), 1);
        return;
      }
    }
    this.hunger++;
  }

  // Calculate the distance to another organism
  distanceTo(other) {
    let dx = this.x - other.x;
    let dy = this.y - other.y;
    return Math.sqrt(dx * dx + dy * dy);
  }
}

// Initialize the ecosystem
let organisms = [];
for (let i = 0; i < 50; i++) {
  organisms.push(new Organism(Math.random() * 500, Math.random() * 500, 10, 2, 'green', false, true));
}
for (let i = 0; i < 10; i++) {
  organisms.push(new Organism(Math.random() * 500, Math.random() * 500, 20, 1, 'red', true, false));
}

// Define the main loop
function loop() {
  // Update the organisms
  for (let i = 0; i < organisms.length; i++) {
    organisms[i].update(organisms);
  }

  // Redraw the canvas
  let canvas = document.getElementById('canvas');
  let context = canvas.getContext('2d');
  context.clearRect(0, 0, canvas.width, canvas.height);
  for (let i = 0; i < organisms.length; i++) {
    let o = organisms[i];
    context.beginPath();
    context.arc(o.x, o.y, o.size, 0, Math.PI * 2);
    context.fillStyle = o.color;
    context.fill();
  }

  // Schedule the next frame
  requestAnimationFrame(loop);
}

// Start the main loop
requestAnimationFrame(loop);
